// source: schema.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('./google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.immudb.schema.AuthConfig', null, global);
goog.exportSymbol('proto.immudb.schema.ChangePasswordRequest', null, global);
goog.exportSymbol('proto.immudb.schema.ChangePermissionRequest', null, global);
goog.exportSymbol('proto.immudb.schema.ConsistencyProof', null, global);
goog.exportSymbol('proto.immudb.schema.Content', null, global);
goog.exportSymbol('proto.immudb.schema.CreateUserRequest', null, global);
goog.exportSymbol('proto.immudb.schema.Database', null, global);
goog.exportSymbol('proto.immudb.schema.DatabaseListResponse', null, global);
goog.exportSymbol('proto.immudb.schema.HealthResponse', null, global);
goog.exportSymbol('proto.immudb.schema.IScanOptions', null, global);
goog.exportSymbol('proto.immudb.schema.InclusionProof', null, global);
goog.exportSymbol('proto.immudb.schema.Index', null, global);
goog.exportSymbol('proto.immudb.schema.Item', null, global);
goog.exportSymbol('proto.immudb.schema.ItemList', null, global);
goog.exportSymbol('proto.immudb.schema.ItemsCount', null, global);
goog.exportSymbol('proto.immudb.schema.KVList', null, global);
goog.exportSymbol('proto.immudb.schema.Key', null, global);
goog.exportSymbol('proto.immudb.schema.KeyList', null, global);
goog.exportSymbol('proto.immudb.schema.KeyPrefix', null, global);
goog.exportSymbol('proto.immudb.schema.KeyValue', null, global);
goog.exportSymbol('proto.immudb.schema.Layer', null, global);
goog.exportSymbol('proto.immudb.schema.LoginRequest', null, global);
goog.exportSymbol('proto.immudb.schema.LoginResponse', null, global);
goog.exportSymbol('proto.immudb.schema.MTLSConfig', null, global);
goog.exportSymbol('proto.immudb.schema.Node', null, global);
goog.exportSymbol('proto.immudb.schema.Page', null, global);
goog.exportSymbol('proto.immudb.schema.Permission', null, global);
goog.exportSymbol('proto.immudb.schema.PermissionAction', null, global);
goog.exportSymbol('proto.immudb.schema.Proof', null, global);
goog.exportSymbol('proto.immudb.schema.ReferenceOptions', null, global);
goog.exportSymbol('proto.immudb.schema.Root', null, global);
goog.exportSymbol('proto.immudb.schema.RootIndex', null, global);
goog.exportSymbol('proto.immudb.schema.SKVList', null, global);
goog.exportSymbol('proto.immudb.schema.SPage', null, global);
goog.exportSymbol('proto.immudb.schema.SafeGetOptions', null, global);
goog.exportSymbol('proto.immudb.schema.SafeIndexOptions', null, global);
goog.exportSymbol('proto.immudb.schema.SafeItem', null, global);
goog.exportSymbol('proto.immudb.schema.SafeReferenceOptions', null, global);
goog.exportSymbol('proto.immudb.schema.SafeSetOptions', null, global);
goog.exportSymbol('proto.immudb.schema.SafeSetSVOptions', null, global);
goog.exportSymbol('proto.immudb.schema.SafeStructuredItem', null, global);
goog.exportSymbol('proto.immudb.schema.SafeZAddOptions', null, global);
goog.exportSymbol('proto.immudb.schema.ScanOptions', null, global);
goog.exportSymbol('proto.immudb.schema.SetActiveUserRequest', null, global);
goog.exportSymbol('proto.immudb.schema.Signature', null, global);
goog.exportSymbol('proto.immudb.schema.StructuredItem', null, global);
goog.exportSymbol('proto.immudb.schema.StructuredItemList', null, global);
goog.exportSymbol('proto.immudb.schema.StructuredKeyValue', null, global);
goog.exportSymbol('proto.immudb.schema.Tree', null, global);
goog.exportSymbol('proto.immudb.schema.UseDatabaseReply', null, global);
goog.exportSymbol('proto.immudb.schema.User', null, global);
goog.exportSymbol('proto.immudb.schema.UserList', null, global);
goog.exportSymbol('proto.immudb.schema.UserRequest', null, global);
goog.exportSymbol('proto.immudb.schema.ZAddOptions', null, global);
goog.exportSymbol('proto.immudb.schema.ZScanOptions', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.Key = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.Key, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.Key.displayName = 'proto.immudb.schema.Key';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.Permission = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.Permission, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.Permission.displayName = 'proto.immudb.schema.Permission';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.immudb.schema.User.repeatedFields_, null);
};
goog.inherits(proto.immudb.schema.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.User.displayName = 'proto.immudb.schema.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.UserList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.immudb.schema.UserList.repeatedFields_, null);
};
goog.inherits(proto.immudb.schema.UserList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.UserList.displayName = 'proto.immudb.schema.UserList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.CreateUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.CreateUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.CreateUserRequest.displayName = 'proto.immudb.schema.CreateUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.UserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.UserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.UserRequest.displayName = 'proto.immudb.schema.UserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.ChangePasswordRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.ChangePasswordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.ChangePasswordRequest.displayName = 'proto.immudb.schema.ChangePasswordRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.LoginRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.LoginRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.LoginRequest.displayName = 'proto.immudb.schema.LoginRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.LoginResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.LoginResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.LoginResponse.displayName = 'proto.immudb.schema.LoginResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.AuthConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.AuthConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.AuthConfig.displayName = 'proto.immudb.schema.AuthConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.MTLSConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.MTLSConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.MTLSConfig.displayName = 'proto.immudb.schema.MTLSConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.Node = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.Node.displayName = 'proto.immudb.schema.Node';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.Layer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.immudb.schema.Layer.repeatedFields_, null);
};
goog.inherits(proto.immudb.schema.Layer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.Layer.displayName = 'proto.immudb.schema.Layer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.Tree = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.immudb.schema.Tree.repeatedFields_, null);
};
goog.inherits(proto.immudb.schema.Tree, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.Tree.displayName = 'proto.immudb.schema.Tree';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.KeyValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.KeyValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.KeyValue.displayName = 'proto.immudb.schema.KeyValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.StructuredKeyValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.StructuredKeyValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.StructuredKeyValue.displayName = 'proto.immudb.schema.StructuredKeyValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.Content = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.Content, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.Content.displayName = 'proto.immudb.schema.Content';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.Index = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.Index, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.Index.displayName = 'proto.immudb.schema.Index';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.Item = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.Item, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.Item.displayName = 'proto.immudb.schema.Item';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.StructuredItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.StructuredItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.StructuredItem.displayName = 'proto.immudb.schema.StructuredItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.KVList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.immudb.schema.KVList.repeatedFields_, null);
};
goog.inherits(proto.immudb.schema.KVList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.KVList.displayName = 'proto.immudb.schema.KVList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.SKVList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.immudb.schema.SKVList.repeatedFields_, null);
};
goog.inherits(proto.immudb.schema.SKVList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.SKVList.displayName = 'proto.immudb.schema.SKVList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.KeyList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.immudb.schema.KeyList.repeatedFields_, null);
};
goog.inherits(proto.immudb.schema.KeyList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.KeyList.displayName = 'proto.immudb.schema.KeyList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.ItemList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.immudb.schema.ItemList.repeatedFields_, null);
};
goog.inherits(proto.immudb.schema.ItemList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.ItemList.displayName = 'proto.immudb.schema.ItemList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.StructuredItemList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.immudb.schema.StructuredItemList.repeatedFields_, null);
};
goog.inherits(proto.immudb.schema.StructuredItemList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.StructuredItemList.displayName = 'proto.immudb.schema.StructuredItemList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.Root = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.Root, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.Root.displayName = 'proto.immudb.schema.Root';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.RootIndex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.RootIndex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.RootIndex.displayName = 'proto.immudb.schema.RootIndex';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.Signature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.Signature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.Signature.displayName = 'proto.immudb.schema.Signature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.ScanOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.ScanOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.ScanOptions.displayName = 'proto.immudb.schema.ScanOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.KeyPrefix = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.KeyPrefix, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.KeyPrefix.displayName = 'proto.immudb.schema.KeyPrefix';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.ItemsCount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.ItemsCount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.ItemsCount.displayName = 'proto.immudb.schema.ItemsCount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.InclusionProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.immudb.schema.InclusionProof.repeatedFields_, null);
};
goog.inherits(proto.immudb.schema.InclusionProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.InclusionProof.displayName = 'proto.immudb.schema.InclusionProof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.ConsistencyProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.immudb.schema.ConsistencyProof.repeatedFields_, null);
};
goog.inherits(proto.immudb.schema.ConsistencyProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.ConsistencyProof.displayName = 'proto.immudb.schema.ConsistencyProof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.Proof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.immudb.schema.Proof.repeatedFields_, null);
};
goog.inherits(proto.immudb.schema.Proof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.Proof.displayName = 'proto.immudb.schema.Proof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.SafeItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.SafeItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.SafeItem.displayName = 'proto.immudb.schema.SafeItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.SafeStructuredItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.SafeStructuredItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.SafeStructuredItem.displayName = 'proto.immudb.schema.SafeStructuredItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.SafeSetOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.SafeSetOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.SafeSetOptions.displayName = 'proto.immudb.schema.SafeSetOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.SafeSetSVOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.SafeSetSVOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.SafeSetSVOptions.displayName = 'proto.immudb.schema.SafeSetSVOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.SafeGetOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.SafeGetOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.SafeGetOptions.displayName = 'proto.immudb.schema.SafeGetOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.SafeReferenceOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.SafeReferenceOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.SafeReferenceOptions.displayName = 'proto.immudb.schema.SafeReferenceOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.HealthResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.HealthResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.HealthResponse.displayName = 'proto.immudb.schema.HealthResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.ReferenceOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.ReferenceOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.ReferenceOptions.displayName = 'proto.immudb.schema.ReferenceOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.ZAddOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.ZAddOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.ZAddOptions.displayName = 'proto.immudb.schema.ZAddOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.ZScanOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.ZScanOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.ZScanOptions.displayName = 'proto.immudb.schema.ZScanOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.IScanOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.IScanOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.IScanOptions.displayName = 'proto.immudb.schema.IScanOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.Page = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.immudb.schema.Page.repeatedFields_, null);
};
goog.inherits(proto.immudb.schema.Page, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.Page.displayName = 'proto.immudb.schema.Page';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.SPage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.immudb.schema.SPage.repeatedFields_, null);
};
goog.inherits(proto.immudb.schema.SPage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.SPage.displayName = 'proto.immudb.schema.SPage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.SafeZAddOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.SafeZAddOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.SafeZAddOptions.displayName = 'proto.immudb.schema.SafeZAddOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.SafeIndexOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.SafeIndexOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.SafeIndexOptions.displayName = 'proto.immudb.schema.SafeIndexOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.Database = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.Database, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.Database.displayName = 'proto.immudb.schema.Database';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.UseDatabaseReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.UseDatabaseReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.UseDatabaseReply.displayName = 'proto.immudb.schema.UseDatabaseReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.ChangePermissionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.ChangePermissionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.ChangePermissionRequest.displayName = 'proto.immudb.schema.ChangePermissionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.SetActiveUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.immudb.schema.SetActiveUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.SetActiveUserRequest.displayName = 'proto.immudb.schema.SetActiveUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.immudb.schema.DatabaseListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.immudb.schema.DatabaseListResponse.repeatedFields_, null);
};
goog.inherits(proto.immudb.schema.DatabaseListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.immudb.schema.DatabaseListResponse.displayName = 'proto.immudb.schema.DatabaseListResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.Key.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.Key.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.Key} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Key.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.Key}
 */
proto.immudb.schema.Key.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.Key;
  return proto.immudb.schema.Key.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.Key} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.Key}
 */
proto.immudb.schema.Key.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.Key.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.Key.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.Key} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Key.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.Key.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.immudb.schema.Key.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.Key.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.Key} returns this
 */
proto.immudb.schema.Key.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.Permission.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.Permission.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.Permission} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Permission.toObject = function(includeInstance, msg) {
  var f, obj = {
    database: jspb.Message.getFieldWithDefault(msg, 1, ""),
    permission: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.Permission}
 */
proto.immudb.schema.Permission.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.Permission;
  return proto.immudb.schema.Permission.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.Permission} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.Permission}
 */
proto.immudb.schema.Permission.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatabase(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPermission(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.Permission.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.Permission.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.Permission} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Permission.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatabase();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPermission();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string database = 1;
 * @return {string}
 */
proto.immudb.schema.Permission.prototype.getDatabase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.immudb.schema.Permission} returns this
 */
proto.immudb.schema.Permission.prototype.setDatabase = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 permission = 2;
 * @return {number}
 */
proto.immudb.schema.Permission.prototype.getPermission = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.immudb.schema.Permission} returns this
 */
proto.immudb.schema.Permission.prototype.setPermission = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.immudb.schema.User.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.User.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: msg.getUser_asB64(),
    permissionsList: jspb.Message.toObjectList(msg.getPermissionsList(),
    proto.immudb.schema.Permission.toObject, includeInstance),
    createdby: jspb.Message.getFieldWithDefault(msg, 4, ""),
    createdat: jspb.Message.getFieldWithDefault(msg, 5, ""),
    active: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.User}
 */
proto.immudb.schema.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.User;
  return proto.immudb.schema.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.User}
 */
proto.immudb.schema.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUser(value);
      break;
    case 3:
      var value = new proto.immudb.schema.Permission;
      reader.readMessage(value,proto.immudb.schema.Permission.deserializeBinaryFromReader);
      msg.addPermissions(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedby(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedat(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPermissionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.immudb.schema.Permission.serializeBinaryToWriter
    );
  }
  f = message.getCreatedby();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatedat();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional bytes user = 1;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.User.prototype.getUser = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes user = 1;
 * This is a type-conversion wrapper around `getUser()`
 * @return {string}
 */
proto.immudb.schema.User.prototype.getUser_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUser()));
};


/**
 * optional bytes user = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUser()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.User.prototype.getUser_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUser()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.User} returns this
 */
proto.immudb.schema.User.prototype.setUser = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated Permission permissions = 3;
 * @return {!Array<!proto.immudb.schema.Permission>}
 */
proto.immudb.schema.User.prototype.getPermissionsList = function() {
  return /** @type{!Array<!proto.immudb.schema.Permission>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.immudb.schema.Permission, 3));
};


/**
 * @param {!Array<!proto.immudb.schema.Permission>} value
 * @return {!proto.immudb.schema.User} returns this
*/
proto.immudb.schema.User.prototype.setPermissionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.immudb.schema.Permission=} opt_value
 * @param {number=} opt_index
 * @return {!proto.immudb.schema.Permission}
 */
proto.immudb.schema.User.prototype.addPermissions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.immudb.schema.Permission, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.immudb.schema.User} returns this
 */
proto.immudb.schema.User.prototype.clearPermissionsList = function() {
  return this.setPermissionsList([]);
};


/**
 * optional string createdby = 4;
 * @return {string}
 */
proto.immudb.schema.User.prototype.getCreatedby = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.immudb.schema.User} returns this
 */
proto.immudb.schema.User.prototype.setCreatedby = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string createdat = 5;
 * @return {string}
 */
proto.immudb.schema.User.prototype.getCreatedat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.immudb.schema.User} returns this
 */
proto.immudb.schema.User.prototype.setCreatedat = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool active = 6;
 * @return {boolean}
 */
proto.immudb.schema.User.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.immudb.schema.User} returns this
 */
proto.immudb.schema.User.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.immudb.schema.UserList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.UserList.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.UserList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.UserList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.UserList.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.immudb.schema.User.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.UserList}
 */
proto.immudb.schema.UserList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.UserList;
  return proto.immudb.schema.UserList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.UserList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.UserList}
 */
proto.immudb.schema.UserList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.immudb.schema.User;
      reader.readMessage(value,proto.immudb.schema.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.UserList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.UserList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.UserList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.UserList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.immudb.schema.User.serializeBinaryToWriter
    );
  }
};


/**
 * repeated User users = 1;
 * @return {!Array<!proto.immudb.schema.User>}
 */
proto.immudb.schema.UserList.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.immudb.schema.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.immudb.schema.User, 1));
};


/**
 * @param {!Array<!proto.immudb.schema.User>} value
 * @return {!proto.immudb.schema.UserList} returns this
*/
proto.immudb.schema.UserList.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.immudb.schema.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.immudb.schema.User}
 */
proto.immudb.schema.UserList.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.immudb.schema.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.immudb.schema.UserList} returns this
 */
proto.immudb.schema.UserList.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.CreateUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.CreateUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.CreateUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.CreateUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: msg.getUser_asB64(),
    password: msg.getPassword_asB64(),
    permission: jspb.Message.getFieldWithDefault(msg, 3, 0),
    database: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.CreateUserRequest}
 */
proto.immudb.schema.CreateUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.CreateUserRequest;
  return proto.immudb.schema.CreateUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.CreateUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.CreateUserRequest}
 */
proto.immudb.schema.CreateUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPermission(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatabase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.CreateUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.CreateUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.CreateUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.CreateUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPassword_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPermission();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getDatabase();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bytes user = 1;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.CreateUserRequest.prototype.getUser = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes user = 1;
 * This is a type-conversion wrapper around `getUser()`
 * @return {string}
 */
proto.immudb.schema.CreateUserRequest.prototype.getUser_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUser()));
};


/**
 * optional bytes user = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUser()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.CreateUserRequest.prototype.getUser_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUser()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.CreateUserRequest} returns this
 */
proto.immudb.schema.CreateUserRequest.prototype.setUser = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes password = 2;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.CreateUserRequest.prototype.getPassword = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes password = 2;
 * This is a type-conversion wrapper around `getPassword()`
 * @return {string}
 */
proto.immudb.schema.CreateUserRequest.prototype.getPassword_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPassword()));
};


/**
 * optional bytes password = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPassword()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.CreateUserRequest.prototype.getPassword_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPassword()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.CreateUserRequest} returns this
 */
proto.immudb.schema.CreateUserRequest.prototype.setPassword = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint32 permission = 3;
 * @return {number}
 */
proto.immudb.schema.CreateUserRequest.prototype.getPermission = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.immudb.schema.CreateUserRequest} returns this
 */
proto.immudb.schema.CreateUserRequest.prototype.setPermission = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string database = 4;
 * @return {string}
 */
proto.immudb.schema.CreateUserRequest.prototype.getDatabase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.immudb.schema.CreateUserRequest} returns this
 */
proto.immudb.schema.CreateUserRequest.prototype.setDatabase = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.UserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.UserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.UserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.UserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: msg.getUser_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.UserRequest}
 */
proto.immudb.schema.UserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.UserRequest;
  return proto.immudb.schema.UserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.UserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.UserRequest}
 */
proto.immudb.schema.UserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.UserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.UserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.UserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.UserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes user = 1;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.UserRequest.prototype.getUser = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes user = 1;
 * This is a type-conversion wrapper around `getUser()`
 * @return {string}
 */
proto.immudb.schema.UserRequest.prototype.getUser_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUser()));
};


/**
 * optional bytes user = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUser()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.UserRequest.prototype.getUser_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUser()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.UserRequest} returns this
 */
proto.immudb.schema.UserRequest.prototype.setUser = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.ChangePasswordRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.ChangePasswordRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.ChangePasswordRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.ChangePasswordRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: msg.getUser_asB64(),
    oldpassword: msg.getOldpassword_asB64(),
    newpassword: msg.getNewpassword_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.ChangePasswordRequest}
 */
proto.immudb.schema.ChangePasswordRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.ChangePasswordRequest;
  return proto.immudb.schema.ChangePasswordRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.ChangePasswordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.ChangePasswordRequest}
 */
proto.immudb.schema.ChangePasswordRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOldpassword(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNewpassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.ChangePasswordRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.ChangePasswordRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.ChangePasswordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.ChangePasswordRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getOldpassword_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getNewpassword_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes user = 1;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.ChangePasswordRequest.prototype.getUser = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes user = 1;
 * This is a type-conversion wrapper around `getUser()`
 * @return {string}
 */
proto.immudb.schema.ChangePasswordRequest.prototype.getUser_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUser()));
};


/**
 * optional bytes user = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUser()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.ChangePasswordRequest.prototype.getUser_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUser()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.ChangePasswordRequest} returns this
 */
proto.immudb.schema.ChangePasswordRequest.prototype.setUser = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes oldPassword = 2;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.ChangePasswordRequest.prototype.getOldpassword = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes oldPassword = 2;
 * This is a type-conversion wrapper around `getOldpassword()`
 * @return {string}
 */
proto.immudb.schema.ChangePasswordRequest.prototype.getOldpassword_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOldpassword()));
};


/**
 * optional bytes oldPassword = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOldpassword()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.ChangePasswordRequest.prototype.getOldpassword_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOldpassword()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.ChangePasswordRequest} returns this
 */
proto.immudb.schema.ChangePasswordRequest.prototype.setOldpassword = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes newPassword = 3;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.ChangePasswordRequest.prototype.getNewpassword = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes newPassword = 3;
 * This is a type-conversion wrapper around `getNewpassword()`
 * @return {string}
 */
proto.immudb.schema.ChangePasswordRequest.prototype.getNewpassword_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNewpassword()));
};


/**
 * optional bytes newPassword = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNewpassword()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.ChangePasswordRequest.prototype.getNewpassword_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNewpassword()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.ChangePasswordRequest} returns this
 */
proto.immudb.schema.ChangePasswordRequest.prototype.setNewpassword = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.LoginRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.LoginRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.LoginRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.LoginRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: msg.getUser_asB64(),
    password: msg.getPassword_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.LoginRequest}
 */
proto.immudb.schema.LoginRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.LoginRequest;
  return proto.immudb.schema.LoginRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.LoginRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.LoginRequest}
 */
proto.immudb.schema.LoginRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.LoginRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.LoginRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.LoginRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.LoginRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPassword_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes user = 1;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.LoginRequest.prototype.getUser = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes user = 1;
 * This is a type-conversion wrapper around `getUser()`
 * @return {string}
 */
proto.immudb.schema.LoginRequest.prototype.getUser_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUser()));
};


/**
 * optional bytes user = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUser()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.LoginRequest.prototype.getUser_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUser()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.LoginRequest} returns this
 */
proto.immudb.schema.LoginRequest.prototype.setUser = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes password = 2;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.LoginRequest.prototype.getPassword = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes password = 2;
 * This is a type-conversion wrapper around `getPassword()`
 * @return {string}
 */
proto.immudb.schema.LoginRequest.prototype.getPassword_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPassword()));
};


/**
 * optional bytes password = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPassword()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.LoginRequest.prototype.getPassword_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPassword()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.LoginRequest} returns this
 */
proto.immudb.schema.LoginRequest.prototype.setPassword = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.LoginResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.LoginResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.LoginResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.LoginResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    warning: msg.getWarning_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.LoginResponse}
 */
proto.immudb.schema.LoginResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.LoginResponse;
  return proto.immudb.schema.LoginResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.LoginResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.LoginResponse}
 */
proto.immudb.schema.LoginResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setWarning(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.LoginResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.LoginResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.LoginResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.LoginResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWarning_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.immudb.schema.LoginResponse.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.immudb.schema.LoginResponse} returns this
 */
proto.immudb.schema.LoginResponse.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes warning = 2;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.LoginResponse.prototype.getWarning = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes warning = 2;
 * This is a type-conversion wrapper around `getWarning()`
 * @return {string}
 */
proto.immudb.schema.LoginResponse.prototype.getWarning_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getWarning()));
};


/**
 * optional bytes warning = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getWarning()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.LoginResponse.prototype.getWarning_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getWarning()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.LoginResponse} returns this
 */
proto.immudb.schema.LoginResponse.prototype.setWarning = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.AuthConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.AuthConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.AuthConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.AuthConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.AuthConfig}
 */
proto.immudb.schema.AuthConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.AuthConfig;
  return proto.immudb.schema.AuthConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.AuthConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.AuthConfig}
 */
proto.immudb.schema.AuthConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKind(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.AuthConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.AuthConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.AuthConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.AuthConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 kind = 1;
 * @return {number}
 */
proto.immudb.schema.AuthConfig.prototype.getKind = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.immudb.schema.AuthConfig} returns this
 */
proto.immudb.schema.AuthConfig.prototype.setKind = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.MTLSConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.MTLSConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.MTLSConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.MTLSConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.MTLSConfig}
 */
proto.immudb.schema.MTLSConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.MTLSConfig;
  return proto.immudb.schema.MTLSConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.MTLSConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.MTLSConfig}
 */
proto.immudb.schema.MTLSConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.MTLSConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.MTLSConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.MTLSConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.MTLSConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool enabled = 1;
 * @return {boolean}
 */
proto.immudb.schema.MTLSConfig.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.immudb.schema.MTLSConfig} returns this
 */
proto.immudb.schema.MTLSConfig.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.Node.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.Node.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.Node} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Node.toObject = function(includeInstance, msg) {
  var f, obj = {
    i: msg.getI_asB64(),
    h: msg.getH_asB64(),
    refk: msg.getRefk_asB64(),
    ref: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    cache: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    root: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.Node}
 */
proto.immudb.schema.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.Node;
  return proto.immudb.schema.Node.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.Node}
 */
proto.immudb.schema.Node.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setI(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setH(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRefk(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRef(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCache(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRoot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.Node.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.Node} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Node.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getI_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getH_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getRefk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getRef();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getCache();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getRoot();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional bytes i = 1;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.Node.prototype.getI = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes i = 1;
 * This is a type-conversion wrapper around `getI()`
 * @return {string}
 */
proto.immudb.schema.Node.prototype.getI_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getI()));
};


/**
 * optional bytes i = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getI()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.Node.prototype.getI_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getI()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.Node} returns this
 */
proto.immudb.schema.Node.prototype.setI = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes h = 2;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.Node.prototype.getH = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes h = 2;
 * This is a type-conversion wrapper around `getH()`
 * @return {string}
 */
proto.immudb.schema.Node.prototype.getH_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getH()));
};


/**
 * optional bytes h = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getH()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.Node.prototype.getH_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getH()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.Node} returns this
 */
proto.immudb.schema.Node.prototype.setH = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes refk = 3;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.Node.prototype.getRefk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes refk = 3;
 * This is a type-conversion wrapper around `getRefk()`
 * @return {string}
 */
proto.immudb.schema.Node.prototype.getRefk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRefk()));
};


/**
 * optional bytes refk = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRefk()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.Node.prototype.getRefk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRefk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.Node} returns this
 */
proto.immudb.schema.Node.prototype.setRefk = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bool ref = 4;
 * @return {boolean}
 */
proto.immudb.schema.Node.prototype.getRef = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.immudb.schema.Node} returns this
 */
proto.immudb.schema.Node.prototype.setRef = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool cache = 5;
 * @return {boolean}
 */
proto.immudb.schema.Node.prototype.getCache = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.immudb.schema.Node} returns this
 */
proto.immudb.schema.Node.prototype.setCache = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool root = 6;
 * @return {boolean}
 */
proto.immudb.schema.Node.prototype.getRoot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.immudb.schema.Node} returns this
 */
proto.immudb.schema.Node.prototype.setRoot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.immudb.schema.Layer.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.Layer.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.Layer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.Layer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Layer.toObject = function(includeInstance, msg) {
  var f, obj = {
    lList: jspb.Message.toObjectList(msg.getLList(),
    proto.immudb.schema.Node.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.Layer}
 */
proto.immudb.schema.Layer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.Layer;
  return proto.immudb.schema.Layer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.Layer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.Layer}
 */
proto.immudb.schema.Layer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.immudb.schema.Node;
      reader.readMessage(value,proto.immudb.schema.Node.deserializeBinaryFromReader);
      msg.addL(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.Layer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.Layer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.Layer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Layer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.immudb.schema.Node.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Node l = 1;
 * @return {!Array<!proto.immudb.schema.Node>}
 */
proto.immudb.schema.Layer.prototype.getLList = function() {
  return /** @type{!Array<!proto.immudb.schema.Node>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.immudb.schema.Node, 1));
};


/**
 * @param {!Array<!proto.immudb.schema.Node>} value
 * @return {!proto.immudb.schema.Layer} returns this
*/
proto.immudb.schema.Layer.prototype.setLList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.immudb.schema.Node=} opt_value
 * @param {number=} opt_index
 * @return {!proto.immudb.schema.Node}
 */
proto.immudb.schema.Layer.prototype.addL = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.immudb.schema.Node, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.immudb.schema.Layer} returns this
 */
proto.immudb.schema.Layer.prototype.clearLList = function() {
  return this.setLList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.immudb.schema.Tree.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.Tree.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.Tree.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.Tree} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Tree.toObject = function(includeInstance, msg) {
  var f, obj = {
    tList: jspb.Message.toObjectList(msg.getTList(),
    proto.immudb.schema.Layer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.Tree}
 */
proto.immudb.schema.Tree.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.Tree;
  return proto.immudb.schema.Tree.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.Tree} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.Tree}
 */
proto.immudb.schema.Tree.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.immudb.schema.Layer;
      reader.readMessage(value,proto.immudb.schema.Layer.deserializeBinaryFromReader);
      msg.addT(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.Tree.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.Tree.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.Tree} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Tree.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.immudb.schema.Layer.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Layer t = 1;
 * @return {!Array<!proto.immudb.schema.Layer>}
 */
proto.immudb.schema.Tree.prototype.getTList = function() {
  return /** @type{!Array<!proto.immudb.schema.Layer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.immudb.schema.Layer, 1));
};


/**
 * @param {!Array<!proto.immudb.schema.Layer>} value
 * @return {!proto.immudb.schema.Tree} returns this
*/
proto.immudb.schema.Tree.prototype.setTList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.immudb.schema.Layer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.immudb.schema.Layer}
 */
proto.immudb.schema.Tree.prototype.addT = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.immudb.schema.Layer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.immudb.schema.Tree} returns this
 */
proto.immudb.schema.Tree.prototype.clearTList = function() {
  return this.setTList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.KeyValue.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.KeyValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.KeyValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.KeyValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64(),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.KeyValue}
 */
proto.immudb.schema.KeyValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.KeyValue;
  return proto.immudb.schema.KeyValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.KeyValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.KeyValue}
 */
proto.immudb.schema.KeyValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.KeyValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.KeyValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.KeyValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.KeyValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.KeyValue.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.immudb.schema.KeyValue.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.KeyValue.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.KeyValue} returns this
 */
proto.immudb.schema.KeyValue.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.KeyValue.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.immudb.schema.KeyValue.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.KeyValue.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.KeyValue} returns this
 */
proto.immudb.schema.KeyValue.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.StructuredKeyValue.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.StructuredKeyValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.StructuredKeyValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.StructuredKeyValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64(),
    value: (f = msg.getValue()) && proto.immudb.schema.Content.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.StructuredKeyValue}
 */
proto.immudb.schema.StructuredKeyValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.StructuredKeyValue;
  return proto.immudb.schema.StructuredKeyValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.StructuredKeyValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.StructuredKeyValue}
 */
proto.immudb.schema.StructuredKeyValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.immudb.schema.Content;
      reader.readMessage(value,proto.immudb.schema.Content.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.StructuredKeyValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.StructuredKeyValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.StructuredKeyValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.StructuredKeyValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.immudb.schema.Content.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.StructuredKeyValue.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.immudb.schema.StructuredKeyValue.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.StructuredKeyValue.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.StructuredKeyValue} returns this
 */
proto.immudb.schema.StructuredKeyValue.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Content value = 2;
 * @return {?proto.immudb.schema.Content}
 */
proto.immudb.schema.StructuredKeyValue.prototype.getValue = function() {
  return /** @type{?proto.immudb.schema.Content} */ (
    jspb.Message.getWrapperField(this, proto.immudb.schema.Content, 2));
};


/**
 * @param {?proto.immudb.schema.Content|undefined} value
 * @return {!proto.immudb.schema.StructuredKeyValue} returns this
*/
proto.immudb.schema.StructuredKeyValue.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.immudb.schema.StructuredKeyValue} returns this
 */
proto.immudb.schema.StructuredKeyValue.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.immudb.schema.StructuredKeyValue.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.Content.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.Content.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.Content} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Content.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.Content}
 */
proto.immudb.schema.Content.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.Content;
  return proto.immudb.schema.Content.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.Content} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.Content}
 */
proto.immudb.schema.Content.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.Content.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.Content.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.Content} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Content.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint64 timestamp = 1;
 * @return {number}
 */
proto.immudb.schema.Content.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.immudb.schema.Content} returns this
 */
proto.immudb.schema.Content.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes payload = 2;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.Content.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes payload = 2;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.immudb.schema.Content.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.Content.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.Content} returns this
 */
proto.immudb.schema.Content.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.Index.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.Index.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.Index} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Index.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.Index}
 */
proto.immudb.schema.Index.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.Index;
  return proto.immudb.schema.Index.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.Index} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.Index}
 */
proto.immudb.schema.Index.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.Index.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.Index.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.Index} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Index.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 index = 1;
 * @return {number}
 */
proto.immudb.schema.Index.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.immudb.schema.Index} returns this
 */
proto.immudb.schema.Index.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.Item.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.Item.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.Item} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Item.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64(),
    value: msg.getValue_asB64(),
    index: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.Item}
 */
proto.immudb.schema.Item.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.Item;
  return proto.immudb.schema.Item.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.Item} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.Item}
 */
proto.immudb.schema.Item.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.Item.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.Item.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.Item} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Item.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.Item.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.immudb.schema.Item.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.Item.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.Item} returns this
 */
proto.immudb.schema.Item.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.Item.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.immudb.schema.Item.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.Item.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.Item} returns this
 */
proto.immudb.schema.Item.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 index = 3;
 * @return {number}
 */
proto.immudb.schema.Item.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.immudb.schema.Item} returns this
 */
proto.immudb.schema.Item.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.StructuredItem.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.StructuredItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.StructuredItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.StructuredItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64(),
    value: (f = msg.getValue()) && proto.immudb.schema.Content.toObject(includeInstance, f),
    index: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.StructuredItem}
 */
proto.immudb.schema.StructuredItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.StructuredItem;
  return proto.immudb.schema.StructuredItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.StructuredItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.StructuredItem}
 */
proto.immudb.schema.StructuredItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.immudb.schema.Content;
      reader.readMessage(value,proto.immudb.schema.Content.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.StructuredItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.StructuredItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.StructuredItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.StructuredItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.immudb.schema.Content.serializeBinaryToWriter
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.StructuredItem.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.immudb.schema.StructuredItem.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.StructuredItem.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.StructuredItem} returns this
 */
proto.immudb.schema.StructuredItem.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Content value = 2;
 * @return {?proto.immudb.schema.Content}
 */
proto.immudb.schema.StructuredItem.prototype.getValue = function() {
  return /** @type{?proto.immudb.schema.Content} */ (
    jspb.Message.getWrapperField(this, proto.immudb.schema.Content, 2));
};


/**
 * @param {?proto.immudb.schema.Content|undefined} value
 * @return {!proto.immudb.schema.StructuredItem} returns this
*/
proto.immudb.schema.StructuredItem.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.immudb.schema.StructuredItem} returns this
 */
proto.immudb.schema.StructuredItem.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.immudb.schema.StructuredItem.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 index = 3;
 * @return {number}
 */
proto.immudb.schema.StructuredItem.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.immudb.schema.StructuredItem} returns this
 */
proto.immudb.schema.StructuredItem.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.immudb.schema.KVList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.KVList.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.KVList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.KVList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.KVList.toObject = function(includeInstance, msg) {
  var f, obj = {
    kvsList: jspb.Message.toObjectList(msg.getKvsList(),
    proto.immudb.schema.KeyValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.KVList}
 */
proto.immudb.schema.KVList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.KVList;
  return proto.immudb.schema.KVList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.KVList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.KVList}
 */
proto.immudb.schema.KVList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.immudb.schema.KeyValue;
      reader.readMessage(value,proto.immudb.schema.KeyValue.deserializeBinaryFromReader);
      msg.addKvs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.KVList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.KVList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.KVList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.KVList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKvsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.immudb.schema.KeyValue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated KeyValue KVs = 1;
 * @return {!Array<!proto.immudb.schema.KeyValue>}
 */
proto.immudb.schema.KVList.prototype.getKvsList = function() {
  return /** @type{!Array<!proto.immudb.schema.KeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.immudb.schema.KeyValue, 1));
};


/**
 * @param {!Array<!proto.immudb.schema.KeyValue>} value
 * @return {!proto.immudb.schema.KVList} returns this
*/
proto.immudb.schema.KVList.prototype.setKvsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.immudb.schema.KeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.immudb.schema.KeyValue}
 */
proto.immudb.schema.KVList.prototype.addKvs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.immudb.schema.KeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.immudb.schema.KVList} returns this
 */
proto.immudb.schema.KVList.prototype.clearKvsList = function() {
  return this.setKvsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.immudb.schema.SKVList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.SKVList.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.SKVList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.SKVList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.SKVList.toObject = function(includeInstance, msg) {
  var f, obj = {
    skvsList: jspb.Message.toObjectList(msg.getSkvsList(),
    proto.immudb.schema.StructuredKeyValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.SKVList}
 */
proto.immudb.schema.SKVList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.SKVList;
  return proto.immudb.schema.SKVList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.SKVList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.SKVList}
 */
proto.immudb.schema.SKVList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.immudb.schema.StructuredKeyValue;
      reader.readMessage(value,proto.immudb.schema.StructuredKeyValue.deserializeBinaryFromReader);
      msg.addSkvs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.SKVList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.SKVList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.SKVList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.SKVList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSkvsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.immudb.schema.StructuredKeyValue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StructuredKeyValue SKVs = 1;
 * @return {!Array<!proto.immudb.schema.StructuredKeyValue>}
 */
proto.immudb.schema.SKVList.prototype.getSkvsList = function() {
  return /** @type{!Array<!proto.immudb.schema.StructuredKeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.immudb.schema.StructuredKeyValue, 1));
};


/**
 * @param {!Array<!proto.immudb.schema.StructuredKeyValue>} value
 * @return {!proto.immudb.schema.SKVList} returns this
*/
proto.immudb.schema.SKVList.prototype.setSkvsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.immudb.schema.StructuredKeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.immudb.schema.StructuredKeyValue}
 */
proto.immudb.schema.SKVList.prototype.addSkvs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.immudb.schema.StructuredKeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.immudb.schema.SKVList} returns this
 */
proto.immudb.schema.SKVList.prototype.clearSkvsList = function() {
  return this.setSkvsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.immudb.schema.KeyList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.KeyList.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.KeyList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.KeyList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.KeyList.toObject = function(includeInstance, msg) {
  var f, obj = {
    keysList: jspb.Message.toObjectList(msg.getKeysList(),
    proto.immudb.schema.Key.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.KeyList}
 */
proto.immudb.schema.KeyList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.KeyList;
  return proto.immudb.schema.KeyList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.KeyList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.KeyList}
 */
proto.immudb.schema.KeyList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.immudb.schema.Key;
      reader.readMessage(value,proto.immudb.schema.Key.deserializeBinaryFromReader);
      msg.addKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.KeyList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.KeyList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.KeyList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.KeyList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.immudb.schema.Key.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Key keys = 1;
 * @return {!Array<!proto.immudb.schema.Key>}
 */
proto.immudb.schema.KeyList.prototype.getKeysList = function() {
  return /** @type{!Array<!proto.immudb.schema.Key>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.immudb.schema.Key, 1));
};


/**
 * @param {!Array<!proto.immudb.schema.Key>} value
 * @return {!proto.immudb.schema.KeyList} returns this
*/
proto.immudb.schema.KeyList.prototype.setKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.immudb.schema.Key=} opt_value
 * @param {number=} opt_index
 * @return {!proto.immudb.schema.Key}
 */
proto.immudb.schema.KeyList.prototype.addKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.immudb.schema.Key, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.immudb.schema.KeyList} returns this
 */
proto.immudb.schema.KeyList.prototype.clearKeysList = function() {
  return this.setKeysList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.immudb.schema.ItemList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.ItemList.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.ItemList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.ItemList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.ItemList.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.immudb.schema.Item.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.ItemList}
 */
proto.immudb.schema.ItemList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.ItemList;
  return proto.immudb.schema.ItemList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.ItemList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.ItemList}
 */
proto.immudb.schema.ItemList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.immudb.schema.Item;
      reader.readMessage(value,proto.immudb.schema.Item.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.ItemList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.ItemList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.ItemList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.ItemList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.immudb.schema.Item.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Item items = 1;
 * @return {!Array<!proto.immudb.schema.Item>}
 */
proto.immudb.schema.ItemList.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.immudb.schema.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.immudb.schema.Item, 1));
};


/**
 * @param {!Array<!proto.immudb.schema.Item>} value
 * @return {!proto.immudb.schema.ItemList} returns this
*/
proto.immudb.schema.ItemList.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.immudb.schema.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.immudb.schema.Item}
 */
proto.immudb.schema.ItemList.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.immudb.schema.Item, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.immudb.schema.ItemList} returns this
 */
proto.immudb.schema.ItemList.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.immudb.schema.StructuredItemList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.StructuredItemList.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.StructuredItemList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.StructuredItemList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.StructuredItemList.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.immudb.schema.StructuredItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.StructuredItemList}
 */
proto.immudb.schema.StructuredItemList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.StructuredItemList;
  return proto.immudb.schema.StructuredItemList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.StructuredItemList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.StructuredItemList}
 */
proto.immudb.schema.StructuredItemList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.immudb.schema.StructuredItem;
      reader.readMessage(value,proto.immudb.schema.StructuredItem.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.StructuredItemList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.StructuredItemList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.StructuredItemList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.StructuredItemList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.immudb.schema.StructuredItem.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StructuredItem items = 1;
 * @return {!Array<!proto.immudb.schema.StructuredItem>}
 */
proto.immudb.schema.StructuredItemList.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.immudb.schema.StructuredItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.immudb.schema.StructuredItem, 1));
};


/**
 * @param {!Array<!proto.immudb.schema.StructuredItem>} value
 * @return {!proto.immudb.schema.StructuredItemList} returns this
*/
proto.immudb.schema.StructuredItemList.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.immudb.schema.StructuredItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.immudb.schema.StructuredItem}
 */
proto.immudb.schema.StructuredItemList.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.immudb.schema.StructuredItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.immudb.schema.StructuredItemList} returns this
 */
proto.immudb.schema.StructuredItemList.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.Root.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.Root.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.Root} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Root.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && proto.immudb.schema.RootIndex.toObject(includeInstance, f),
    signature: (f = msg.getSignature()) && proto.immudb.schema.Signature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.Root}
 */
proto.immudb.schema.Root.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.Root;
  return proto.immudb.schema.Root.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.Root} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.Root}
 */
proto.immudb.schema.Root.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.immudb.schema.RootIndex;
      reader.readMessage(value,proto.immudb.schema.RootIndex.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 2:
      var value = new proto.immudb.schema.Signature;
      reader.readMessage(value,proto.immudb.schema.Signature.deserializeBinaryFromReader);
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.Root.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.Root.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.Root} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Root.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.immudb.schema.RootIndex.serializeBinaryToWriter
    );
  }
  f = message.getSignature();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.immudb.schema.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * optional RootIndex payload = 1;
 * @return {?proto.immudb.schema.RootIndex}
 */
proto.immudb.schema.Root.prototype.getPayload = function() {
  return /** @type{?proto.immudb.schema.RootIndex} */ (
    jspb.Message.getWrapperField(this, proto.immudb.schema.RootIndex, 1));
};


/**
 * @param {?proto.immudb.schema.RootIndex|undefined} value
 * @return {!proto.immudb.schema.Root} returns this
*/
proto.immudb.schema.Root.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.immudb.schema.Root} returns this
 */
proto.immudb.schema.Root.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.immudb.schema.Root.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Signature signature = 2;
 * @return {?proto.immudb.schema.Signature}
 */
proto.immudb.schema.Root.prototype.getSignature = function() {
  return /** @type{?proto.immudb.schema.Signature} */ (
    jspb.Message.getWrapperField(this, proto.immudb.schema.Signature, 2));
};


/**
 * @param {?proto.immudb.schema.Signature|undefined} value
 * @return {!proto.immudb.schema.Root} returns this
*/
proto.immudb.schema.Root.prototype.setSignature = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.immudb.schema.Root} returns this
 */
proto.immudb.schema.Root.prototype.clearSignature = function() {
  return this.setSignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.immudb.schema.Root.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.RootIndex.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.RootIndex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.RootIndex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.RootIndex.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    root: msg.getRoot_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.RootIndex}
 */
proto.immudb.schema.RootIndex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.RootIndex;
  return proto.immudb.schema.RootIndex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.RootIndex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.RootIndex}
 */
proto.immudb.schema.RootIndex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.RootIndex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.RootIndex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.RootIndex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.RootIndex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint64 index = 1;
 * @return {number}
 */
proto.immudb.schema.RootIndex.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.immudb.schema.RootIndex} returns this
 */
proto.immudb.schema.RootIndex.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes root = 2;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.RootIndex.prototype.getRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes root = 2;
 * This is a type-conversion wrapper around `getRoot()`
 * @return {string}
 */
proto.immudb.schema.RootIndex.prototype.getRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoot()));
};


/**
 * optional bytes root = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoot()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.RootIndex.prototype.getRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.RootIndex} returns this
 */
proto.immudb.schema.RootIndex.prototype.setRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.Signature.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.Signature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.Signature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Signature.toObject = function(includeInstance, msg) {
  var f, obj = {
    signature: msg.getSignature_asB64(),
    publickey: msg.getPublickey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.Signature}
 */
proto.immudb.schema.Signature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.Signature;
  return proto.immudb.schema.Signature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.Signature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.Signature}
 */
proto.immudb.schema.Signature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublickey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.Signature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.Signature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.Signature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Signature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes signature = 1;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.Signature.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes signature = 1;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.immudb.schema.Signature.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.Signature.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.Signature} returns this
 */
proto.immudb.schema.Signature.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes publicKey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.Signature.prototype.getPublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes publicKey = 2;
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {string}
 */
proto.immudb.schema.Signature.prototype.getPublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublickey()));
};


/**
 * optional bytes publicKey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.Signature.prototype.getPublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublickey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.Signature} returns this
 */
proto.immudb.schema.Signature.prototype.setPublickey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.ScanOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.ScanOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.ScanOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.ScanOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    prefix: msg.getPrefix_asB64(),
    offset: msg.getOffset_asB64(),
    limit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    reverse: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    deep: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.ScanOptions}
 */
proto.immudb.schema.ScanOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.ScanOptions;
  return proto.immudb.schema.ScanOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.ScanOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.ScanOptions}
 */
proto.immudb.schema.ScanOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrefix(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOffset(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimit(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReverse(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeep(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.ScanOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.ScanOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.ScanOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.ScanOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrefix_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getOffset_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getReverse();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getDeep();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional bytes prefix = 1;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.ScanOptions.prototype.getPrefix = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes prefix = 1;
 * This is a type-conversion wrapper around `getPrefix()`
 * @return {string}
 */
proto.immudb.schema.ScanOptions.prototype.getPrefix_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrefix()));
};


/**
 * optional bytes prefix = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrefix()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.ScanOptions.prototype.getPrefix_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrefix()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.ScanOptions} returns this
 */
proto.immudb.schema.ScanOptions.prototype.setPrefix = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes offset = 2;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.ScanOptions.prototype.getOffset = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes offset = 2;
 * This is a type-conversion wrapper around `getOffset()`
 * @return {string}
 */
proto.immudb.schema.ScanOptions.prototype.getOffset_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOffset()));
};


/**
 * optional bytes offset = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOffset()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.ScanOptions.prototype.getOffset_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOffset()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.ScanOptions} returns this
 */
proto.immudb.schema.ScanOptions.prototype.setOffset = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 limit = 3;
 * @return {number}
 */
proto.immudb.schema.ScanOptions.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.immudb.schema.ScanOptions} returns this
 */
proto.immudb.schema.ScanOptions.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool reverse = 4;
 * @return {boolean}
 */
proto.immudb.schema.ScanOptions.prototype.getReverse = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.immudb.schema.ScanOptions} returns this
 */
proto.immudb.schema.ScanOptions.prototype.setReverse = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool deep = 5;
 * @return {boolean}
 */
proto.immudb.schema.ScanOptions.prototype.getDeep = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.immudb.schema.ScanOptions} returns this
 */
proto.immudb.schema.ScanOptions.prototype.setDeep = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.KeyPrefix.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.KeyPrefix.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.KeyPrefix} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.KeyPrefix.toObject = function(includeInstance, msg) {
  var f, obj = {
    prefix: msg.getPrefix_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.KeyPrefix}
 */
proto.immudb.schema.KeyPrefix.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.KeyPrefix;
  return proto.immudb.schema.KeyPrefix.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.KeyPrefix} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.KeyPrefix}
 */
proto.immudb.schema.KeyPrefix.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrefix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.KeyPrefix.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.KeyPrefix.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.KeyPrefix} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.KeyPrefix.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrefix_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes prefix = 1;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.KeyPrefix.prototype.getPrefix = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes prefix = 1;
 * This is a type-conversion wrapper around `getPrefix()`
 * @return {string}
 */
proto.immudb.schema.KeyPrefix.prototype.getPrefix_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrefix()));
};


/**
 * optional bytes prefix = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrefix()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.KeyPrefix.prototype.getPrefix_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrefix()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.KeyPrefix} returns this
 */
proto.immudb.schema.KeyPrefix.prototype.setPrefix = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.ItemsCount.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.ItemsCount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.ItemsCount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.ItemsCount.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.ItemsCount}
 */
proto.immudb.schema.ItemsCount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.ItemsCount;
  return proto.immudb.schema.ItemsCount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.ItemsCount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.ItemsCount}
 */
proto.immudb.schema.ItemsCount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.ItemsCount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.ItemsCount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.ItemsCount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.ItemsCount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 count = 1;
 * @return {number}
 */
proto.immudb.schema.ItemsCount.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.immudb.schema.ItemsCount} returns this
 */
proto.immudb.schema.ItemsCount.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.immudb.schema.InclusionProof.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.InclusionProof.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.InclusionProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.InclusionProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.InclusionProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    at: jspb.Message.getFieldWithDefault(msg, 1, 0),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0),
    root: msg.getRoot_asB64(),
    leaf: msg.getLeaf_asB64(),
    pathList: msg.getPathList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.InclusionProof}
 */
proto.immudb.schema.InclusionProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.InclusionProof;
  return proto.immudb.schema.InclusionProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.InclusionProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.InclusionProof}
 */
proto.immudb.schema.InclusionProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAt(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoot(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLeaf(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.InclusionProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.InclusionProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.InclusionProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.InclusionProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAt();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getLeaf_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getPathList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      5,
      f
    );
  }
};


/**
 * optional uint64 at = 1;
 * @return {number}
 */
proto.immudb.schema.InclusionProof.prototype.getAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.immudb.schema.InclusionProof} returns this
 */
proto.immudb.schema.InclusionProof.prototype.setAt = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 index = 2;
 * @return {number}
 */
proto.immudb.schema.InclusionProof.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.immudb.schema.InclusionProof} returns this
 */
proto.immudb.schema.InclusionProof.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes root = 3;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.InclusionProof.prototype.getRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes root = 3;
 * This is a type-conversion wrapper around `getRoot()`
 * @return {string}
 */
proto.immudb.schema.InclusionProof.prototype.getRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoot()));
};


/**
 * optional bytes root = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoot()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.InclusionProof.prototype.getRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.InclusionProof} returns this
 */
proto.immudb.schema.InclusionProof.prototype.setRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes leaf = 4;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.InclusionProof.prototype.getLeaf = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes leaf = 4;
 * This is a type-conversion wrapper around `getLeaf()`
 * @return {string}
 */
proto.immudb.schema.InclusionProof.prototype.getLeaf_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLeaf()));
};


/**
 * optional bytes leaf = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLeaf()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.InclusionProof.prototype.getLeaf_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLeaf()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.InclusionProof} returns this
 */
proto.immudb.schema.InclusionProof.prototype.setLeaf = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * repeated bytes path = 5;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.immudb.schema.InclusionProof.prototype.getPathList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * repeated bytes path = 5;
 * This is a type-conversion wrapper around `getPathList()`
 * @return {!Array<string>}
 */
proto.immudb.schema.InclusionProof.prototype.getPathList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getPathList()));
};


/**
 * repeated bytes path = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPathList()`
 * @return {!Array<!Uint8Array>}
 */
proto.immudb.schema.InclusionProof.prototype.getPathList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getPathList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.immudb.schema.InclusionProof} returns this
 */
proto.immudb.schema.InclusionProof.prototype.setPathList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.immudb.schema.InclusionProof} returns this
 */
proto.immudb.schema.InclusionProof.prototype.addPath = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.immudb.schema.InclusionProof} returns this
 */
proto.immudb.schema.InclusionProof.prototype.clearPathList = function() {
  return this.setPathList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.immudb.schema.ConsistencyProof.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.ConsistencyProof.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.ConsistencyProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.ConsistencyProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.ConsistencyProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    first: jspb.Message.getFieldWithDefault(msg, 1, 0),
    second: jspb.Message.getFieldWithDefault(msg, 2, 0),
    firstroot: msg.getFirstroot_asB64(),
    secondroot: msg.getSecondroot_asB64(),
    pathList: msg.getPathList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.ConsistencyProof}
 */
proto.immudb.schema.ConsistencyProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.ConsistencyProof;
  return proto.immudb.schema.ConsistencyProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.ConsistencyProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.ConsistencyProof}
 */
proto.immudb.schema.ConsistencyProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFirst(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSecond(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFirstroot(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSecondroot(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.ConsistencyProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.ConsistencyProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.ConsistencyProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.ConsistencyProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirst();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSecond();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getFirstroot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getSecondroot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getPathList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      5,
      f
    );
  }
};


/**
 * optional uint64 first = 1;
 * @return {number}
 */
proto.immudb.schema.ConsistencyProof.prototype.getFirst = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.immudb.schema.ConsistencyProof} returns this
 */
proto.immudb.schema.ConsistencyProof.prototype.setFirst = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 second = 2;
 * @return {number}
 */
proto.immudb.schema.ConsistencyProof.prototype.getSecond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.immudb.schema.ConsistencyProof} returns this
 */
proto.immudb.schema.ConsistencyProof.prototype.setSecond = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes firstRoot = 3;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.ConsistencyProof.prototype.getFirstroot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes firstRoot = 3;
 * This is a type-conversion wrapper around `getFirstroot()`
 * @return {string}
 */
proto.immudb.schema.ConsistencyProof.prototype.getFirstroot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFirstroot()));
};


/**
 * optional bytes firstRoot = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFirstroot()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.ConsistencyProof.prototype.getFirstroot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFirstroot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.ConsistencyProof} returns this
 */
proto.immudb.schema.ConsistencyProof.prototype.setFirstroot = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes secondRoot = 4;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.ConsistencyProof.prototype.getSecondroot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes secondRoot = 4;
 * This is a type-conversion wrapper around `getSecondroot()`
 * @return {string}
 */
proto.immudb.schema.ConsistencyProof.prototype.getSecondroot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSecondroot()));
};


/**
 * optional bytes secondRoot = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecondroot()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.ConsistencyProof.prototype.getSecondroot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSecondroot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.ConsistencyProof} returns this
 */
proto.immudb.schema.ConsistencyProof.prototype.setSecondroot = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * repeated bytes path = 5;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.immudb.schema.ConsistencyProof.prototype.getPathList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * repeated bytes path = 5;
 * This is a type-conversion wrapper around `getPathList()`
 * @return {!Array<string>}
 */
proto.immudb.schema.ConsistencyProof.prototype.getPathList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getPathList()));
};


/**
 * repeated bytes path = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPathList()`
 * @return {!Array<!Uint8Array>}
 */
proto.immudb.schema.ConsistencyProof.prototype.getPathList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getPathList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.immudb.schema.ConsistencyProof} returns this
 */
proto.immudb.schema.ConsistencyProof.prototype.setPathList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.immudb.schema.ConsistencyProof} returns this
 */
proto.immudb.schema.ConsistencyProof.prototype.addPath = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.immudb.schema.ConsistencyProof} returns this
 */
proto.immudb.schema.ConsistencyProof.prototype.clearPathList = function() {
  return this.setPathList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.immudb.schema.Proof.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.Proof.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.Proof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.Proof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Proof.toObject = function(includeInstance, msg) {
  var f, obj = {
    leaf: msg.getLeaf_asB64(),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0),
    root: msg.getRoot_asB64(),
    at: jspb.Message.getFieldWithDefault(msg, 4, 0),
    inclusionpathList: msg.getInclusionpathList_asB64(),
    consistencypathList: msg.getConsistencypathList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.Proof}
 */
proto.immudb.schema.Proof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.Proof;
  return proto.immudb.schema.Proof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.Proof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.Proof}
 */
proto.immudb.schema.Proof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLeaf(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRoot(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAt(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addInclusionpath(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addConsistencypath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.Proof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.Proof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.Proof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Proof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeaf_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRoot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getAt();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getInclusionpathList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      5,
      f
    );
  }
  f = message.getConsistencypathList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      6,
      f
    );
  }
};


/**
 * optional bytes leaf = 1;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.Proof.prototype.getLeaf = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes leaf = 1;
 * This is a type-conversion wrapper around `getLeaf()`
 * @return {string}
 */
proto.immudb.schema.Proof.prototype.getLeaf_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLeaf()));
};


/**
 * optional bytes leaf = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLeaf()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.Proof.prototype.getLeaf_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLeaf()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.Proof} returns this
 */
proto.immudb.schema.Proof.prototype.setLeaf = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 index = 2;
 * @return {number}
 */
proto.immudb.schema.Proof.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.immudb.schema.Proof} returns this
 */
proto.immudb.schema.Proof.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes root = 3;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.Proof.prototype.getRoot = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes root = 3;
 * This is a type-conversion wrapper around `getRoot()`
 * @return {string}
 */
proto.immudb.schema.Proof.prototype.getRoot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRoot()));
};


/**
 * optional bytes root = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRoot()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.Proof.prototype.getRoot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRoot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.Proof} returns this
 */
proto.immudb.schema.Proof.prototype.setRoot = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint64 at = 4;
 * @return {number}
 */
proto.immudb.schema.Proof.prototype.getAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.immudb.schema.Proof} returns this
 */
proto.immudb.schema.Proof.prototype.setAt = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated bytes inclusionPath = 5;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.immudb.schema.Proof.prototype.getInclusionpathList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * repeated bytes inclusionPath = 5;
 * This is a type-conversion wrapper around `getInclusionpathList()`
 * @return {!Array<string>}
 */
proto.immudb.schema.Proof.prototype.getInclusionpathList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getInclusionpathList()));
};


/**
 * repeated bytes inclusionPath = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInclusionpathList()`
 * @return {!Array<!Uint8Array>}
 */
proto.immudb.schema.Proof.prototype.getInclusionpathList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getInclusionpathList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.immudb.schema.Proof} returns this
 */
proto.immudb.schema.Proof.prototype.setInclusionpathList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.immudb.schema.Proof} returns this
 */
proto.immudb.schema.Proof.prototype.addInclusionpath = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.immudb.schema.Proof} returns this
 */
proto.immudb.schema.Proof.prototype.clearInclusionpathList = function() {
  return this.setInclusionpathList([]);
};


/**
 * repeated bytes consistencyPath = 6;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.immudb.schema.Proof.prototype.getConsistencypathList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * repeated bytes consistencyPath = 6;
 * This is a type-conversion wrapper around `getConsistencypathList()`
 * @return {!Array<string>}
 */
proto.immudb.schema.Proof.prototype.getConsistencypathList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getConsistencypathList()));
};


/**
 * repeated bytes consistencyPath = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConsistencypathList()`
 * @return {!Array<!Uint8Array>}
 */
proto.immudb.schema.Proof.prototype.getConsistencypathList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getConsistencypathList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.immudb.schema.Proof} returns this
 */
proto.immudb.schema.Proof.prototype.setConsistencypathList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.immudb.schema.Proof} returns this
 */
proto.immudb.schema.Proof.prototype.addConsistencypath = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.immudb.schema.Proof} returns this
 */
proto.immudb.schema.Proof.prototype.clearConsistencypathList = function() {
  return this.setConsistencypathList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.SafeItem.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.SafeItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.SafeItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.SafeItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    item: (f = msg.getItem()) && proto.immudb.schema.Item.toObject(includeInstance, f),
    proof: (f = msg.getProof()) && proto.immudb.schema.Proof.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.SafeItem}
 */
proto.immudb.schema.SafeItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.SafeItem;
  return proto.immudb.schema.SafeItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.SafeItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.SafeItem}
 */
proto.immudb.schema.SafeItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.immudb.schema.Item;
      reader.readMessage(value,proto.immudb.schema.Item.deserializeBinaryFromReader);
      msg.setItem(value);
      break;
    case 2:
      var value = new proto.immudb.schema.Proof;
      reader.readMessage(value,proto.immudb.schema.Proof.deserializeBinaryFromReader);
      msg.setProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.SafeItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.SafeItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.SafeItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.SafeItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItem();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.immudb.schema.Item.serializeBinaryToWriter
    );
  }
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.immudb.schema.Proof.serializeBinaryToWriter
    );
  }
};


/**
 * optional Item item = 1;
 * @return {?proto.immudb.schema.Item}
 */
proto.immudb.schema.SafeItem.prototype.getItem = function() {
  return /** @type{?proto.immudb.schema.Item} */ (
    jspb.Message.getWrapperField(this, proto.immudb.schema.Item, 1));
};


/**
 * @param {?proto.immudb.schema.Item|undefined} value
 * @return {!proto.immudb.schema.SafeItem} returns this
*/
proto.immudb.schema.SafeItem.prototype.setItem = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.immudb.schema.SafeItem} returns this
 */
proto.immudb.schema.SafeItem.prototype.clearItem = function() {
  return this.setItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.immudb.schema.SafeItem.prototype.hasItem = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Proof proof = 2;
 * @return {?proto.immudb.schema.Proof}
 */
proto.immudb.schema.SafeItem.prototype.getProof = function() {
  return /** @type{?proto.immudb.schema.Proof} */ (
    jspb.Message.getWrapperField(this, proto.immudb.schema.Proof, 2));
};


/**
 * @param {?proto.immudb.schema.Proof|undefined} value
 * @return {!proto.immudb.schema.SafeItem} returns this
*/
proto.immudb.schema.SafeItem.prototype.setProof = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.immudb.schema.SafeItem} returns this
 */
proto.immudb.schema.SafeItem.prototype.clearProof = function() {
  return this.setProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.immudb.schema.SafeItem.prototype.hasProof = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.SafeStructuredItem.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.SafeStructuredItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.SafeStructuredItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.SafeStructuredItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    item: (f = msg.getItem()) && proto.immudb.schema.StructuredItem.toObject(includeInstance, f),
    proof: (f = msg.getProof()) && proto.immudb.schema.Proof.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.SafeStructuredItem}
 */
proto.immudb.schema.SafeStructuredItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.SafeStructuredItem;
  return proto.immudb.schema.SafeStructuredItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.SafeStructuredItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.SafeStructuredItem}
 */
proto.immudb.schema.SafeStructuredItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.immudb.schema.StructuredItem;
      reader.readMessage(value,proto.immudb.schema.StructuredItem.deserializeBinaryFromReader);
      msg.setItem(value);
      break;
    case 2:
      var value = new proto.immudb.schema.Proof;
      reader.readMessage(value,proto.immudb.schema.Proof.deserializeBinaryFromReader);
      msg.setProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.SafeStructuredItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.SafeStructuredItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.SafeStructuredItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.SafeStructuredItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItem();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.immudb.schema.StructuredItem.serializeBinaryToWriter
    );
  }
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.immudb.schema.Proof.serializeBinaryToWriter
    );
  }
};


/**
 * optional StructuredItem item = 1;
 * @return {?proto.immudb.schema.StructuredItem}
 */
proto.immudb.schema.SafeStructuredItem.prototype.getItem = function() {
  return /** @type{?proto.immudb.schema.StructuredItem} */ (
    jspb.Message.getWrapperField(this, proto.immudb.schema.StructuredItem, 1));
};


/**
 * @param {?proto.immudb.schema.StructuredItem|undefined} value
 * @return {!proto.immudb.schema.SafeStructuredItem} returns this
*/
proto.immudb.schema.SafeStructuredItem.prototype.setItem = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.immudb.schema.SafeStructuredItem} returns this
 */
proto.immudb.schema.SafeStructuredItem.prototype.clearItem = function() {
  return this.setItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.immudb.schema.SafeStructuredItem.prototype.hasItem = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Proof proof = 2;
 * @return {?proto.immudb.schema.Proof}
 */
proto.immudb.schema.SafeStructuredItem.prototype.getProof = function() {
  return /** @type{?proto.immudb.schema.Proof} */ (
    jspb.Message.getWrapperField(this, proto.immudb.schema.Proof, 2));
};


/**
 * @param {?proto.immudb.schema.Proof|undefined} value
 * @return {!proto.immudb.schema.SafeStructuredItem} returns this
*/
proto.immudb.schema.SafeStructuredItem.prototype.setProof = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.immudb.schema.SafeStructuredItem} returns this
 */
proto.immudb.schema.SafeStructuredItem.prototype.clearProof = function() {
  return this.setProof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.immudb.schema.SafeStructuredItem.prototype.hasProof = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.SafeSetOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.SafeSetOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.SafeSetOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.SafeSetOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    kv: (f = msg.getKv()) && proto.immudb.schema.KeyValue.toObject(includeInstance, f),
    rootindex: (f = msg.getRootindex()) && proto.immudb.schema.Index.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.SafeSetOptions}
 */
proto.immudb.schema.SafeSetOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.SafeSetOptions;
  return proto.immudb.schema.SafeSetOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.SafeSetOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.SafeSetOptions}
 */
proto.immudb.schema.SafeSetOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.immudb.schema.KeyValue;
      reader.readMessage(value,proto.immudb.schema.KeyValue.deserializeBinaryFromReader);
      msg.setKv(value);
      break;
    case 2:
      var value = new proto.immudb.schema.Index;
      reader.readMessage(value,proto.immudb.schema.Index.deserializeBinaryFromReader);
      msg.setRootindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.SafeSetOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.SafeSetOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.SafeSetOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.SafeSetOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKv();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.immudb.schema.KeyValue.serializeBinaryToWriter
    );
  }
  f = message.getRootindex();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.immudb.schema.Index.serializeBinaryToWriter
    );
  }
};


/**
 * optional KeyValue kv = 1;
 * @return {?proto.immudb.schema.KeyValue}
 */
proto.immudb.schema.SafeSetOptions.prototype.getKv = function() {
  return /** @type{?proto.immudb.schema.KeyValue} */ (
    jspb.Message.getWrapperField(this, proto.immudb.schema.KeyValue, 1));
};


/**
 * @param {?proto.immudb.schema.KeyValue|undefined} value
 * @return {!proto.immudb.schema.SafeSetOptions} returns this
*/
proto.immudb.schema.SafeSetOptions.prototype.setKv = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.immudb.schema.SafeSetOptions} returns this
 */
proto.immudb.schema.SafeSetOptions.prototype.clearKv = function() {
  return this.setKv(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.immudb.schema.SafeSetOptions.prototype.hasKv = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Index rootIndex = 2;
 * @return {?proto.immudb.schema.Index}
 */
proto.immudb.schema.SafeSetOptions.prototype.getRootindex = function() {
  return /** @type{?proto.immudb.schema.Index} */ (
    jspb.Message.getWrapperField(this, proto.immudb.schema.Index, 2));
};


/**
 * @param {?proto.immudb.schema.Index|undefined} value
 * @return {!proto.immudb.schema.SafeSetOptions} returns this
*/
proto.immudb.schema.SafeSetOptions.prototype.setRootindex = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.immudb.schema.SafeSetOptions} returns this
 */
proto.immudb.schema.SafeSetOptions.prototype.clearRootindex = function() {
  return this.setRootindex(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.immudb.schema.SafeSetOptions.prototype.hasRootindex = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.SafeSetSVOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.SafeSetSVOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.SafeSetSVOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.SafeSetSVOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    skv: (f = msg.getSkv()) && proto.immudb.schema.StructuredKeyValue.toObject(includeInstance, f),
    rootindex: (f = msg.getRootindex()) && proto.immudb.schema.Index.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.SafeSetSVOptions}
 */
proto.immudb.schema.SafeSetSVOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.SafeSetSVOptions;
  return proto.immudb.schema.SafeSetSVOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.SafeSetSVOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.SafeSetSVOptions}
 */
proto.immudb.schema.SafeSetSVOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.immudb.schema.StructuredKeyValue;
      reader.readMessage(value,proto.immudb.schema.StructuredKeyValue.deserializeBinaryFromReader);
      msg.setSkv(value);
      break;
    case 2:
      var value = new proto.immudb.schema.Index;
      reader.readMessage(value,proto.immudb.schema.Index.deserializeBinaryFromReader);
      msg.setRootindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.SafeSetSVOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.SafeSetSVOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.SafeSetSVOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.SafeSetSVOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSkv();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.immudb.schema.StructuredKeyValue.serializeBinaryToWriter
    );
  }
  f = message.getRootindex();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.immudb.schema.Index.serializeBinaryToWriter
    );
  }
};


/**
 * optional StructuredKeyValue skv = 1;
 * @return {?proto.immudb.schema.StructuredKeyValue}
 */
proto.immudb.schema.SafeSetSVOptions.prototype.getSkv = function() {
  return /** @type{?proto.immudb.schema.StructuredKeyValue} */ (
    jspb.Message.getWrapperField(this, proto.immudb.schema.StructuredKeyValue, 1));
};


/**
 * @param {?proto.immudb.schema.StructuredKeyValue|undefined} value
 * @return {!proto.immudb.schema.SafeSetSVOptions} returns this
*/
proto.immudb.schema.SafeSetSVOptions.prototype.setSkv = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.immudb.schema.SafeSetSVOptions} returns this
 */
proto.immudb.schema.SafeSetSVOptions.prototype.clearSkv = function() {
  return this.setSkv(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.immudb.schema.SafeSetSVOptions.prototype.hasSkv = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Index rootIndex = 2;
 * @return {?proto.immudb.schema.Index}
 */
proto.immudb.schema.SafeSetSVOptions.prototype.getRootindex = function() {
  return /** @type{?proto.immudb.schema.Index} */ (
    jspb.Message.getWrapperField(this, proto.immudb.schema.Index, 2));
};


/**
 * @param {?proto.immudb.schema.Index|undefined} value
 * @return {!proto.immudb.schema.SafeSetSVOptions} returns this
*/
proto.immudb.schema.SafeSetSVOptions.prototype.setRootindex = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.immudb.schema.SafeSetSVOptions} returns this
 */
proto.immudb.schema.SafeSetSVOptions.prototype.clearRootindex = function() {
  return this.setRootindex(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.immudb.schema.SafeSetSVOptions.prototype.hasRootindex = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.SafeGetOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.SafeGetOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.SafeGetOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.SafeGetOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64(),
    rootindex: (f = msg.getRootindex()) && proto.immudb.schema.Index.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.SafeGetOptions}
 */
proto.immudb.schema.SafeGetOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.SafeGetOptions;
  return proto.immudb.schema.SafeGetOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.SafeGetOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.SafeGetOptions}
 */
proto.immudb.schema.SafeGetOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.immudb.schema.Index;
      reader.readMessage(value,proto.immudb.schema.Index.deserializeBinaryFromReader);
      msg.setRootindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.SafeGetOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.SafeGetOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.SafeGetOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.SafeGetOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRootindex();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.immudb.schema.Index.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.SafeGetOptions.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.immudb.schema.SafeGetOptions.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.SafeGetOptions.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.SafeGetOptions} returns this
 */
proto.immudb.schema.SafeGetOptions.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Index rootIndex = 2;
 * @return {?proto.immudb.schema.Index}
 */
proto.immudb.schema.SafeGetOptions.prototype.getRootindex = function() {
  return /** @type{?proto.immudb.schema.Index} */ (
    jspb.Message.getWrapperField(this, proto.immudb.schema.Index, 2));
};


/**
 * @param {?proto.immudb.schema.Index|undefined} value
 * @return {!proto.immudb.schema.SafeGetOptions} returns this
*/
proto.immudb.schema.SafeGetOptions.prototype.setRootindex = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.immudb.schema.SafeGetOptions} returns this
 */
proto.immudb.schema.SafeGetOptions.prototype.clearRootindex = function() {
  return this.setRootindex(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.immudb.schema.SafeGetOptions.prototype.hasRootindex = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.SafeReferenceOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.SafeReferenceOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.SafeReferenceOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.SafeReferenceOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    ro: (f = msg.getRo()) && proto.immudb.schema.ReferenceOptions.toObject(includeInstance, f),
    rootindex: (f = msg.getRootindex()) && proto.immudb.schema.Index.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.SafeReferenceOptions}
 */
proto.immudb.schema.SafeReferenceOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.SafeReferenceOptions;
  return proto.immudb.schema.SafeReferenceOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.SafeReferenceOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.SafeReferenceOptions}
 */
proto.immudb.schema.SafeReferenceOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.immudb.schema.ReferenceOptions;
      reader.readMessage(value,proto.immudb.schema.ReferenceOptions.deserializeBinaryFromReader);
      msg.setRo(value);
      break;
    case 2:
      var value = new proto.immudb.schema.Index;
      reader.readMessage(value,proto.immudb.schema.Index.deserializeBinaryFromReader);
      msg.setRootindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.SafeReferenceOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.SafeReferenceOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.SafeReferenceOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.SafeReferenceOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.immudb.schema.ReferenceOptions.serializeBinaryToWriter
    );
  }
  f = message.getRootindex();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.immudb.schema.Index.serializeBinaryToWriter
    );
  }
};


/**
 * optional ReferenceOptions ro = 1;
 * @return {?proto.immudb.schema.ReferenceOptions}
 */
proto.immudb.schema.SafeReferenceOptions.prototype.getRo = function() {
  return /** @type{?proto.immudb.schema.ReferenceOptions} */ (
    jspb.Message.getWrapperField(this, proto.immudb.schema.ReferenceOptions, 1));
};


/**
 * @param {?proto.immudb.schema.ReferenceOptions|undefined} value
 * @return {!proto.immudb.schema.SafeReferenceOptions} returns this
*/
proto.immudb.schema.SafeReferenceOptions.prototype.setRo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.immudb.schema.SafeReferenceOptions} returns this
 */
proto.immudb.schema.SafeReferenceOptions.prototype.clearRo = function() {
  return this.setRo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.immudb.schema.SafeReferenceOptions.prototype.hasRo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Index rootIndex = 2;
 * @return {?proto.immudb.schema.Index}
 */
proto.immudb.schema.SafeReferenceOptions.prototype.getRootindex = function() {
  return /** @type{?proto.immudb.schema.Index} */ (
    jspb.Message.getWrapperField(this, proto.immudb.schema.Index, 2));
};


/**
 * @param {?proto.immudb.schema.Index|undefined} value
 * @return {!proto.immudb.schema.SafeReferenceOptions} returns this
*/
proto.immudb.schema.SafeReferenceOptions.prototype.setRootindex = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.immudb.schema.SafeReferenceOptions} returns this
 */
proto.immudb.schema.SafeReferenceOptions.prototype.clearRootindex = function() {
  return this.setRootindex(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.immudb.schema.SafeReferenceOptions.prototype.hasRootindex = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.HealthResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.HealthResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.HealthResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.HealthResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    version: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.HealthResponse}
 */
proto.immudb.schema.HealthResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.HealthResponse;
  return proto.immudb.schema.HealthResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.HealthResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.HealthResponse}
 */
proto.immudb.schema.HealthResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.HealthResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.HealthResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.HealthResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.HealthResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool status = 1;
 * @return {boolean}
 */
proto.immudb.schema.HealthResponse.prototype.getStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.immudb.schema.HealthResponse} returns this
 */
proto.immudb.schema.HealthResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.immudb.schema.HealthResponse.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.immudb.schema.HealthResponse} returns this
 */
proto.immudb.schema.HealthResponse.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.ReferenceOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.ReferenceOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.ReferenceOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.ReferenceOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    reference: msg.getReference_asB64(),
    key: msg.getKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.ReferenceOptions}
 */
proto.immudb.schema.ReferenceOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.ReferenceOptions;
  return proto.immudb.schema.ReferenceOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.ReferenceOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.ReferenceOptions}
 */
proto.immudb.schema.ReferenceOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReference(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.ReferenceOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.ReferenceOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.ReferenceOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.ReferenceOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReference_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes reference = 1;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.ReferenceOptions.prototype.getReference = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes reference = 1;
 * This is a type-conversion wrapper around `getReference()`
 * @return {string}
 */
proto.immudb.schema.ReferenceOptions.prototype.getReference_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReference()));
};


/**
 * optional bytes reference = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReference()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.ReferenceOptions.prototype.getReference_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReference()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.ReferenceOptions} returns this
 */
proto.immudb.schema.ReferenceOptions.prototype.setReference = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.ReferenceOptions.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes key = 2;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.immudb.schema.ReferenceOptions.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.ReferenceOptions.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.ReferenceOptions} returns this
 */
proto.immudb.schema.ReferenceOptions.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.ZAddOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.ZAddOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.ZAddOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.ZAddOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    set: msg.getSet_asB64(),
    score: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    key: msg.getKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.ZAddOptions}
 */
proto.immudb.schema.ZAddOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.ZAddOptions;
  return proto.immudb.schema.ZAddOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.ZAddOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.ZAddOptions}
 */
proto.immudb.schema.ZAddOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSet(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setScore(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.ZAddOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.ZAddOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.ZAddOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.ZAddOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSet_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getScore();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes set = 1;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.ZAddOptions.prototype.getSet = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes set = 1;
 * This is a type-conversion wrapper around `getSet()`
 * @return {string}
 */
proto.immudb.schema.ZAddOptions.prototype.getSet_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSet()));
};


/**
 * optional bytes set = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSet()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.ZAddOptions.prototype.getSet_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSet()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.ZAddOptions} returns this
 */
proto.immudb.schema.ZAddOptions.prototype.setSet = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional double score = 2;
 * @return {number}
 */
proto.immudb.schema.ZAddOptions.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.immudb.schema.ZAddOptions} returns this
 */
proto.immudb.schema.ZAddOptions.prototype.setScore = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional bytes key = 3;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.ZAddOptions.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes key = 3;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.immudb.schema.ZAddOptions.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.ZAddOptions.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.ZAddOptions} returns this
 */
proto.immudb.schema.ZAddOptions.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.ZScanOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.ZScanOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.ZScanOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.ZScanOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    set: msg.getSet_asB64(),
    offset: msg.getOffset_asB64(),
    limit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    reverse: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.ZScanOptions}
 */
proto.immudb.schema.ZScanOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.ZScanOptions;
  return proto.immudb.schema.ZScanOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.ZScanOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.ZScanOptions}
 */
proto.immudb.schema.ZScanOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSet(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOffset(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLimit(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReverse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.ZScanOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.ZScanOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.ZScanOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.ZScanOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSet_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getOffset_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getReverse();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bytes set = 1;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.ZScanOptions.prototype.getSet = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes set = 1;
 * This is a type-conversion wrapper around `getSet()`
 * @return {string}
 */
proto.immudb.schema.ZScanOptions.prototype.getSet_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSet()));
};


/**
 * optional bytes set = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSet()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.ZScanOptions.prototype.getSet_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSet()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.ZScanOptions} returns this
 */
proto.immudb.schema.ZScanOptions.prototype.setSet = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes offset = 2;
 * @return {!(string|Uint8Array)}
 */
proto.immudb.schema.ZScanOptions.prototype.getOffset = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes offset = 2;
 * This is a type-conversion wrapper around `getOffset()`
 * @return {string}
 */
proto.immudb.schema.ZScanOptions.prototype.getOffset_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOffset()));
};


/**
 * optional bytes offset = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOffset()`
 * @return {!Uint8Array}
 */
proto.immudb.schema.ZScanOptions.prototype.getOffset_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOffset()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.immudb.schema.ZScanOptions} returns this
 */
proto.immudb.schema.ZScanOptions.prototype.setOffset = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional uint64 limit = 3;
 * @return {number}
 */
proto.immudb.schema.ZScanOptions.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.immudb.schema.ZScanOptions} returns this
 */
proto.immudb.schema.ZScanOptions.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool reverse = 4;
 * @return {boolean}
 */
proto.immudb.schema.ZScanOptions.prototype.getReverse = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.immudb.schema.ZScanOptions} returns this
 */
proto.immudb.schema.ZScanOptions.prototype.setReverse = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.IScanOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.IScanOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.IScanOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.IScanOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    pagesize: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pagenumber: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.IScanOptions}
 */
proto.immudb.schema.IScanOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.IScanOptions;
  return proto.immudb.schema.IScanOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.IScanOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.IScanOptions}
 */
proto.immudb.schema.IScanOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPagesize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPagenumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.IScanOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.IScanOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.IScanOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.IScanOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPagenumber();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 pageSize = 1;
 * @return {number}
 */
proto.immudb.schema.IScanOptions.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.immudb.schema.IScanOptions} returns this
 */
proto.immudb.schema.IScanOptions.prototype.setPagesize = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 pageNumber = 2;
 * @return {number}
 */
proto.immudb.schema.IScanOptions.prototype.getPagenumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.immudb.schema.IScanOptions} returns this
 */
proto.immudb.schema.IScanOptions.prototype.setPagenumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.immudb.schema.Page.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.Page.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.Page.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.Page} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Page.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.immudb.schema.Item.toObject, includeInstance),
    more: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.Page}
 */
proto.immudb.schema.Page.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.Page;
  return proto.immudb.schema.Page.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.Page} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.Page}
 */
proto.immudb.schema.Page.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.immudb.schema.Item;
      reader.readMessage(value,proto.immudb.schema.Item.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.Page.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.Page.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.Page} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Page.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.immudb.schema.Item.serializeBinaryToWriter
    );
  }
  f = message.getMore();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated Item items = 1;
 * @return {!Array<!proto.immudb.schema.Item>}
 */
proto.immudb.schema.Page.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.immudb.schema.Item>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.immudb.schema.Item, 1));
};


/**
 * @param {!Array<!proto.immudb.schema.Item>} value
 * @return {!proto.immudb.schema.Page} returns this
*/
proto.immudb.schema.Page.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.immudb.schema.Item=} opt_value
 * @param {number=} opt_index
 * @return {!proto.immudb.schema.Item}
 */
proto.immudb.schema.Page.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.immudb.schema.Item, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.immudb.schema.Page} returns this
 */
proto.immudb.schema.Page.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};


/**
 * optional bool more = 3;
 * @return {boolean}
 */
proto.immudb.schema.Page.prototype.getMore = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.immudb.schema.Page} returns this
 */
proto.immudb.schema.Page.prototype.setMore = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.immudb.schema.SPage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.SPage.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.SPage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.SPage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.SPage.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.immudb.schema.StructuredItem.toObject, includeInstance),
    pagenum: jspb.Message.getFieldWithDefault(msg, 2, 0),
    more: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.SPage}
 */
proto.immudb.schema.SPage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.SPage;
  return proto.immudb.schema.SPage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.SPage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.SPage}
 */
proto.immudb.schema.SPage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.immudb.schema.StructuredItem;
      reader.readMessage(value,proto.immudb.schema.StructuredItem.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPagenum(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.SPage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.SPage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.SPage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.SPage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.immudb.schema.StructuredItem.serializeBinaryToWriter
    );
  }
  f = message.getPagenum();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMore();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated StructuredItem items = 1;
 * @return {!Array<!proto.immudb.schema.StructuredItem>}
 */
proto.immudb.schema.SPage.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.immudb.schema.StructuredItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.immudb.schema.StructuredItem, 1));
};


/**
 * @param {!Array<!proto.immudb.schema.StructuredItem>} value
 * @return {!proto.immudb.schema.SPage} returns this
*/
proto.immudb.schema.SPage.prototype.setItemsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.immudb.schema.StructuredItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.immudb.schema.StructuredItem}
 */
proto.immudb.schema.SPage.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.immudb.schema.StructuredItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.immudb.schema.SPage} returns this
 */
proto.immudb.schema.SPage.prototype.clearItemsList = function() {
  return this.setItemsList([]);
};


/**
 * optional uint64 pageNum = 2;
 * @return {number}
 */
proto.immudb.schema.SPage.prototype.getPagenum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.immudb.schema.SPage} returns this
 */
proto.immudb.schema.SPage.prototype.setPagenum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool more = 3;
 * @return {boolean}
 */
proto.immudb.schema.SPage.prototype.getMore = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.immudb.schema.SPage} returns this
 */
proto.immudb.schema.SPage.prototype.setMore = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.SafeZAddOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.SafeZAddOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.SafeZAddOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.SafeZAddOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    zopts: (f = msg.getZopts()) && proto.immudb.schema.ZAddOptions.toObject(includeInstance, f),
    rootindex: (f = msg.getRootindex()) && proto.immudb.schema.Index.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.SafeZAddOptions}
 */
proto.immudb.schema.SafeZAddOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.SafeZAddOptions;
  return proto.immudb.schema.SafeZAddOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.SafeZAddOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.SafeZAddOptions}
 */
proto.immudb.schema.SafeZAddOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.immudb.schema.ZAddOptions;
      reader.readMessage(value,proto.immudb.schema.ZAddOptions.deserializeBinaryFromReader);
      msg.setZopts(value);
      break;
    case 2:
      var value = new proto.immudb.schema.Index;
      reader.readMessage(value,proto.immudb.schema.Index.deserializeBinaryFromReader);
      msg.setRootindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.SafeZAddOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.SafeZAddOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.SafeZAddOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.SafeZAddOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZopts();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.immudb.schema.ZAddOptions.serializeBinaryToWriter
    );
  }
  f = message.getRootindex();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.immudb.schema.Index.serializeBinaryToWriter
    );
  }
};


/**
 * optional ZAddOptions zopts = 1;
 * @return {?proto.immudb.schema.ZAddOptions}
 */
proto.immudb.schema.SafeZAddOptions.prototype.getZopts = function() {
  return /** @type{?proto.immudb.schema.ZAddOptions} */ (
    jspb.Message.getWrapperField(this, proto.immudb.schema.ZAddOptions, 1));
};


/**
 * @param {?proto.immudb.schema.ZAddOptions|undefined} value
 * @return {!proto.immudb.schema.SafeZAddOptions} returns this
*/
proto.immudb.schema.SafeZAddOptions.prototype.setZopts = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.immudb.schema.SafeZAddOptions} returns this
 */
proto.immudb.schema.SafeZAddOptions.prototype.clearZopts = function() {
  return this.setZopts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.immudb.schema.SafeZAddOptions.prototype.hasZopts = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Index rootIndex = 2;
 * @return {?proto.immudb.schema.Index}
 */
proto.immudb.schema.SafeZAddOptions.prototype.getRootindex = function() {
  return /** @type{?proto.immudb.schema.Index} */ (
    jspb.Message.getWrapperField(this, proto.immudb.schema.Index, 2));
};


/**
 * @param {?proto.immudb.schema.Index|undefined} value
 * @return {!proto.immudb.schema.SafeZAddOptions} returns this
*/
proto.immudb.schema.SafeZAddOptions.prototype.setRootindex = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.immudb.schema.SafeZAddOptions} returns this
 */
proto.immudb.schema.SafeZAddOptions.prototype.clearRootindex = function() {
  return this.setRootindex(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.immudb.schema.SafeZAddOptions.prototype.hasRootindex = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.SafeIndexOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.SafeIndexOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.SafeIndexOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.SafeIndexOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rootindex: (f = msg.getRootindex()) && proto.immudb.schema.Index.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.SafeIndexOptions}
 */
proto.immudb.schema.SafeIndexOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.SafeIndexOptions;
  return proto.immudb.schema.SafeIndexOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.SafeIndexOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.SafeIndexOptions}
 */
proto.immudb.schema.SafeIndexOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIndex(value);
      break;
    case 2:
      var value = new proto.immudb.schema.Index;
      reader.readMessage(value,proto.immudb.schema.Index.deserializeBinaryFromReader);
      msg.setRootindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.SafeIndexOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.SafeIndexOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.SafeIndexOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.SafeIndexOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getRootindex();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.immudb.schema.Index.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 index = 1;
 * @return {number}
 */
proto.immudb.schema.SafeIndexOptions.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.immudb.schema.SafeIndexOptions} returns this
 */
proto.immudb.schema.SafeIndexOptions.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Index rootIndex = 2;
 * @return {?proto.immudb.schema.Index}
 */
proto.immudb.schema.SafeIndexOptions.prototype.getRootindex = function() {
  return /** @type{?proto.immudb.schema.Index} */ (
    jspb.Message.getWrapperField(this, proto.immudb.schema.Index, 2));
};


/**
 * @param {?proto.immudb.schema.Index|undefined} value
 * @return {!proto.immudb.schema.SafeIndexOptions} returns this
*/
proto.immudb.schema.SafeIndexOptions.prototype.setRootindex = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.immudb.schema.SafeIndexOptions} returns this
 */
proto.immudb.schema.SafeIndexOptions.prototype.clearRootindex = function() {
  return this.setRootindex(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.immudb.schema.SafeIndexOptions.prototype.hasRootindex = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.Database.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.Database.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.Database} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Database.toObject = function(includeInstance, msg) {
  var f, obj = {
    databasename: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.Database}
 */
proto.immudb.schema.Database.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.Database;
  return proto.immudb.schema.Database.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.Database} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.Database}
 */
proto.immudb.schema.Database.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatabasename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.Database.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.Database.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.Database} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.Database.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatabasename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string databasename = 1;
 * @return {string}
 */
proto.immudb.schema.Database.prototype.getDatabasename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.immudb.schema.Database} returns this
 */
proto.immudb.schema.Database.prototype.setDatabasename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.UseDatabaseReply.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.UseDatabaseReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.UseDatabaseReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.UseDatabaseReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.UseDatabaseReply}
 */
proto.immudb.schema.UseDatabaseReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.UseDatabaseReply;
  return proto.immudb.schema.UseDatabaseReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.UseDatabaseReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.UseDatabaseReply}
 */
proto.immudb.schema.UseDatabaseReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.UseDatabaseReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.UseDatabaseReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.UseDatabaseReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.UseDatabaseReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.immudb.schema.UseDatabaseReply.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.immudb.schema.UseDatabaseReply} returns this
 */
proto.immudb.schema.UseDatabaseReply.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.ChangePermissionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.ChangePermissionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.ChangePermissionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.ChangePermissionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, 0),
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    database: jspb.Message.getFieldWithDefault(msg, 3, ""),
    permission: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.ChangePermissionRequest}
 */
proto.immudb.schema.ChangePermissionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.ChangePermissionRequest;
  return proto.immudb.schema.ChangePermissionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.ChangePermissionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.ChangePermissionRequest}
 */
proto.immudb.schema.ChangePermissionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.immudb.schema.PermissionAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatabase(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPermission(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.ChangePermissionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.ChangePermissionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.ChangePermissionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.ChangePermissionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDatabase();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPermission();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional PermissionAction action = 1;
 * @return {!proto.immudb.schema.PermissionAction}
 */
proto.immudb.schema.ChangePermissionRequest.prototype.getAction = function() {
  return /** @type {!proto.immudb.schema.PermissionAction} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.immudb.schema.PermissionAction} value
 * @return {!proto.immudb.schema.ChangePermissionRequest} returns this
 */
proto.immudb.schema.ChangePermissionRequest.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.immudb.schema.ChangePermissionRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.immudb.schema.ChangePermissionRequest} returns this
 */
proto.immudb.schema.ChangePermissionRequest.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string database = 3;
 * @return {string}
 */
proto.immudb.schema.ChangePermissionRequest.prototype.getDatabase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.immudb.schema.ChangePermissionRequest} returns this
 */
proto.immudb.schema.ChangePermissionRequest.prototype.setDatabase = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 permission = 4;
 * @return {number}
 */
proto.immudb.schema.ChangePermissionRequest.prototype.getPermission = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.immudb.schema.ChangePermissionRequest} returns this
 */
proto.immudb.schema.ChangePermissionRequest.prototype.setPermission = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.SetActiveUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.SetActiveUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.SetActiveUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.SetActiveUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    active: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    username: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.SetActiveUserRequest}
 */
proto.immudb.schema.SetActiveUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.SetActiveUserRequest;
  return proto.immudb.schema.SetActiveUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.SetActiveUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.SetActiveUserRequest}
 */
proto.immudb.schema.SetActiveUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.SetActiveUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.SetActiveUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.SetActiveUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.SetActiveUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActive();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool active = 1;
 * @return {boolean}
 */
proto.immudb.schema.SetActiveUserRequest.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.immudb.schema.SetActiveUserRequest} returns this
 */
proto.immudb.schema.SetActiveUserRequest.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.immudb.schema.SetActiveUserRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.immudb.schema.SetActiveUserRequest} returns this
 */
proto.immudb.schema.SetActiveUserRequest.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.immudb.schema.DatabaseListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.immudb.schema.DatabaseListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.immudb.schema.DatabaseListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.immudb.schema.DatabaseListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.DatabaseListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    databasesList: jspb.Message.toObjectList(msg.getDatabasesList(),
    proto.immudb.schema.Database.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.immudb.schema.DatabaseListResponse}
 */
proto.immudb.schema.DatabaseListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.immudb.schema.DatabaseListResponse;
  return proto.immudb.schema.DatabaseListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.immudb.schema.DatabaseListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.immudb.schema.DatabaseListResponse}
 */
proto.immudb.schema.DatabaseListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.immudb.schema.Database;
      reader.readMessage(value,proto.immudb.schema.Database.deserializeBinaryFromReader);
      msg.addDatabases(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.immudb.schema.DatabaseListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.immudb.schema.DatabaseListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.immudb.schema.DatabaseListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.immudb.schema.DatabaseListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDatabasesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.immudb.schema.Database.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Database databases = 1;
 * @return {!Array<!proto.immudb.schema.Database>}
 */
proto.immudb.schema.DatabaseListResponse.prototype.getDatabasesList = function() {
  return /** @type{!Array<!proto.immudb.schema.Database>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.immudb.schema.Database, 1));
};


/**
 * @param {!Array<!proto.immudb.schema.Database>} value
 * @return {!proto.immudb.schema.DatabaseListResponse} returns this
*/
proto.immudb.schema.DatabaseListResponse.prototype.setDatabasesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.immudb.schema.Database=} opt_value
 * @param {number=} opt_index
 * @return {!proto.immudb.schema.Database}
 */
proto.immudb.schema.DatabaseListResponse.prototype.addDatabases = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.immudb.schema.Database, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.immudb.schema.DatabaseListResponse} returns this
 */
proto.immudb.schema.DatabaseListResponse.prototype.clearDatabasesList = function() {
  return this.setDatabasesList([]);
};


/**
 * @enum {number}
 */
proto.immudb.schema.PermissionAction = {
  GRANT: 0,
  REVOKE: 1
};

goog.object.extend(exports, proto.immudb.schema);
